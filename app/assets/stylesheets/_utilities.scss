@import "variables";
@import "functions";

//Display
@each $breakpoint in map-keys($breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    @each $direction in $directions {
      @each $value in $spacer {
        $dir: "";
        @if $direction == "l" {
          $dir: "-left";
        } @else if $direction == "r" {
          $dir: "-right";
        } @else if $direction == "b" {
          $dir: "-bottom";
        } @else if $direction == "t" {
          $dir: "-top";
        }

				.m-#{$value} {
					margin: $value *0.25rem !important;
				}

        .m#{$direction}#{$infix}-#{$value} {
          margin#{$dir}: $value * 0.25rem !important;
        }

        .p#{$direction}#{$infix}-#{$value} {
          padding#{$dir}: $value * 0.25rem !important;
        }
      }
    }
  }
}

.my-auto {
  margin-top: auto;
  margin-bottom: auto;
}

.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

.ml-auto {
  margin-left: auto;
}

.mr-auto {
  margin-right: auto;
}

.mt-auto {
  margin-top: auto;
}

.mb-auto {
  margin-bottom: auto;
}

//Display
@each $breakpoint in map-keys($breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    @each $value in $columns {
      .grid#{$infix}-#{$value}{
        display: grid;
        grid-template-columns: repeat($value, 1fr);
        grid-gap: 1rem;
				position: relative;
      }
      .width#{$infix}-#{$value}{
        grid-column-end: span $value;
				position: relative;
      }
      .grid-column-start#{$infix}-#{$value}{
        grid-column-start: $value;
				position: relative;
      }
    }
  }
}

@each $breakpoint in map-keys($breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @each $value in $displays {
      .d#{$infix}-#{$value} {
        display: $value !important;
      }
    }
  }
}

//Text
@each $breakpoint in map-keys($breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    @each $value in $text-aligns {
      .text#{$infix}-#{$value} {
        text-align: $value !important;
      }
    }
  }
}

.noselect {
  -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
     -khtml-user-select: none; /* Konqueror HTML */
       -moz-user-select: none; /* Old versions of Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
            user-select: none; /* Non-prefixed version, currently
                                  supported by Chrome, Opera and Firefox */
}

.divider{
	height: 0;
	margin: .25rem 0;
	overflow: hidden;
	border-top: 1px solid rgba(0,0,0,0.12);
}

@keyframes pulse {
	0% {
		transform: scale(0);
		opacity: 0;
	}
	50% {
		// Fixes a weird bug with the interaction between Safari and the result of
		// the SASS compilation for the animation.
		// Essentially, we need to make sure that "50%" and "100%" don't get merged
		// into a single "50%, 100%" entry, so we need to avoid them having any
		// matching properties.
		transform: scale(0.80);
	}
	100% {
		transform: scale(1);
		opacity: 1;
		visibility: visible;
	}
}

@keyframes ripple {
	from {
		opacity: 1;
	}
	to {
		opacity: 0.9;
	}
}

@keyframes spin {
	100%{
		transform: rotate(360deg);
	}
}

@keyframes indeterminate-load {
	0%{
		width: 5%;
	}
	10%{
		left: 10%;
		width: 15%;
	}
	25%{
		left: 20%;
		width: 35%;
	}
	50%{
		left: 30%;
		width: 50%;
	}
	100%{
		left: 50%;
		width: 50%;
	}
}